// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/thiagogre/fabric-massified-insurances/test-network/rest-api-go/internal/domain"
)

// MockEventInterface is a mock of EventInterface interface.
type MockEventInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventInterfaceMockRecorder
}

// MockEventInterfaceMockRecorder is the mock recorder for MockEventInterface.
type MockEventInterfaceMockRecorder struct {
	mock *MockEventInterface
}

// NewMockEventInterface creates a new mock instance.
func NewMockEventInterface(ctrl *gomock.Controller) *MockEventInterface {
	mock := &MockEventInterface{ctrl: ctrl}
	mock.recorder = &MockEventInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventInterface) EXPECT() *MockEventInterfaceMockRecorder {
	return m.recorder
}

// AppendEvent mocks base method.
func (m *MockEventInterface) AppendEvent(event *domain.Events, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEvent", event, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendEvent indicates an expected call of AppendEvent.
func (mr *MockEventInterfaceMockRecorder) AppendEvent(event, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEvent", reflect.TypeOf((*MockEventInterface)(nil).AppendEvent), event, filename)
}

// GetEventsFromStorage mocks base method.
func (m *MockEventInterface) GetEventsFromStorage() ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsFromStorage")
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsFromStorage indicates an expected call of GetEventsFromStorage.
func (mr *MockEventInterfaceMockRecorder) GetEventsFromStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsFromStorage", reflect.TypeOf((*MockEventInterface)(nil).GetEventsFromStorage))
}

// HandleEvent mocks base method.
func (m *MockEventInterface) HandleEvent(events <-chan *domain.Events, txnID, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", events, txnID, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockEventInterfaceMockRecorder) HandleEvent(events, txnID, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventInterface)(nil).HandleEvent), events, txnID, filename)
}

// ReplayEvents mocks base method.
func (m *MockEventInterface) ReplayEvents(ctx context.Context, channelID, chaincodeID string, txnBlockNumber int, txnID string) (<-chan *domain.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplayEvents", ctx, channelID, chaincodeID, txnBlockNumber, txnID)
	ret0, _ := ret[0].(<-chan *domain.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplayEvents indicates an expected call of ReplayEvents.
func (mr *MockEventInterfaceMockRecorder) ReplayEvents(ctx, channelID, chaincodeID, txnBlockNumber, txnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayEvents", reflect.TypeOf((*MockEventInterface)(nil).ReplayEvents), ctx, channelID, chaincodeID, txnBlockNumber, txnID)
}

// MockEventRepositoryInterface is a mock of EventRepositoryInterface interface.
type MockEventRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryInterfaceMockRecorder
}

// MockEventRepositoryInterfaceMockRecorder is the mock recorder for MockEventRepositoryInterface.
type MockEventRepositoryInterfaceMockRecorder struct {
	mock *MockEventRepositoryInterface
}

// NewMockEventRepositoryInterface creates a new mock instance.
func NewMockEventRepositoryInterface(ctrl *gomock.Controller) *MockEventRepositoryInterface {
	mock := &MockEventRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepositoryInterface) EXPECT() *MockEventRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AppendData mocks base method.
func (m *MockEventRepositoryInterface) AppendData(data []byte, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendData", data, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendData indicates an expected call of AppendData.
func (mr *MockEventRepositoryInterfaceMockRecorder) AppendData(data, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendData", reflect.TypeOf((*MockEventRepositoryInterface)(nil).AppendData), data, filename)
}

// GetAllEvents mocks base method.
func (m *MockEventRepositoryInterface) GetAllEvents() ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents")
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockEventRepositoryInterfaceMockRecorder) GetAllEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventRepositoryInterface)(nil).GetAllEvents))
}
