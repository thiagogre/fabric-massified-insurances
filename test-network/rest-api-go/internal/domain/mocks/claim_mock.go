// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/claim.go

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/thiagogre/fabric-massified-insurances/test-network/rest-api-go/internal/domain"
	dto "github.com/thiagogre/fabric-massified-insurances/test-network/rest-api-go/internal/dto"
)

// MockClaimServiceInterface is a mock of ClaimServiceInterface interface.
type MockClaimServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClaimServiceInterfaceMockRecorder
}

// MockClaimServiceInterfaceMockRecorder is the mock recorder for MockClaimServiceInterface.
type MockClaimServiceInterfaceMockRecorder struct {
	mock *MockClaimServiceInterface
}

// NewMockClaimServiceInterface creates a new mock instance.
func NewMockClaimServiceInterface(ctrl *gomock.Controller) *MockClaimServiceInterface {
	mock := &MockClaimServiceInterface{ctrl: ctrl}
	mock.recorder = &MockClaimServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimServiceInterface) EXPECT() *MockClaimServiceInterfaceMockRecorder {
	return m.recorder
}

// GetAsset mocks base method.
func (m *MockClaimServiceInterface) GetAsset(username string) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", username)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockClaimServiceInterfaceMockRecorder) GetAsset(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockClaimServiceInterface)(nil).GetAsset), username)
}

// IsExist mocks base method.
func (m *MockClaimServiceInterface) IsExist(filePath string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", filePath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockClaimServiceInterfaceMockRecorder) IsExist(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockClaimServiceInterface)(nil).IsExist), filePath)
}

// ListPDFs mocks base method.
func (m *MockClaimServiceInterface) ListPDFs(username, host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPDFs", username, host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPDFs indicates an expected call of ListPDFs.
func (mr *MockClaimServiceInterfaceMockRecorder) ListPDFs(username, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPDFs", reflect.TypeOf((*MockClaimServiceInterface)(nil).ListPDFs), username, host)
}

// StoreClaim mocks base method.
func (m *MockClaimServiceInterface) StoreClaim(file *multipart.FileHeader, uploadDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClaim", file, uploadDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClaim indicates an expected call of StoreClaim.
func (mr *MockClaimServiceInterfaceMockRecorder) StoreClaim(file, uploadDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClaim", reflect.TypeOf((*MockClaimServiceInterface)(nil).StoreClaim), file, uploadDir)
}

// UpdateAssetClaimStatus mocks base method.
func (m *MockClaimServiceInterface) UpdateAssetClaimStatus(asset *domain.Asset, newClaimStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetClaimStatus", asset, newClaimStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssetClaimStatus indicates an expected call of UpdateAssetClaimStatus.
func (mr *MockClaimServiceInterfaceMockRecorder) UpdateAssetClaimStatus(asset, newClaimStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetClaimStatus", reflect.TypeOf((*MockClaimServiceInterface)(nil).UpdateAssetClaimStatus), asset, newClaimStatus)
}

// MockClaimRepositoryInterface is a mock of ClaimRepositoryInterface interface.
type MockClaimRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClaimRepositoryInterfaceMockRecorder
}

// MockClaimRepositoryInterfaceMockRecorder is the mock recorder for MockClaimRepositoryInterface.
type MockClaimRepositoryInterfaceMockRecorder struct {
	mock *MockClaimRepositoryInterface
}

// NewMockClaimRepositoryInterface creates a new mock instance.
func NewMockClaimRepositoryInterface(ctrl *gomock.Controller) *MockClaimRepositoryInterface {
	mock := &MockClaimRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockClaimRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimRepositoryInterface) EXPECT() *MockClaimRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAsset mocks base method.
func (m *MockClaimRepositoryInterface) GetAsset(username string) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", username)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockClaimRepositoryInterfaceMockRecorder) GetAsset(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockClaimRepositoryInterface)(nil).GetAsset), username)
}

// IsFileOrDirExist mocks base method.
func (m *MockClaimRepositoryInterface) IsFileOrDirExist(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileOrDirExist", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFileOrDirExist indicates an expected call of IsFileOrDirExist.
func (mr *MockClaimRepositoryInterfaceMockRecorder) IsFileOrDirExist(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileOrDirExist", reflect.TypeOf((*MockClaimRepositoryInterface)(nil).IsFileOrDirExist), path)
}

// ListPDFFiles mocks base method.
func (m *MockClaimRepositoryInterface) ListPDFFiles(username string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPDFFiles", username)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPDFFiles indicates an expected call of ListPDFFiles.
func (mr *MockClaimRepositoryInterfaceMockRecorder) ListPDFFiles(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPDFFiles", reflect.TypeOf((*MockClaimRepositoryInterface)(nil).ListPDFFiles), username)
}

// SaveFile mocks base method.
func (m *MockClaimRepositoryInterface) SaveFile(file *multipart.FileHeader, uploadDir, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", file, uploadDir, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockClaimRepositoryInterfaceMockRecorder) SaveFile(file, uploadDir, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockClaimRepositoryInterface)(nil).SaveFile), file, uploadDir, filename)
}

// UpdateAsset mocks base method.
func (m *MockClaimRepositoryInterface) UpdateAsset(body *dto.InvokeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockClaimRepositoryInterfaceMockRecorder) UpdateAsset(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockClaimRepositoryInterface)(nil).UpdateAsset), body)
}
