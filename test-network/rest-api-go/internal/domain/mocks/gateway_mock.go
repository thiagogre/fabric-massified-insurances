// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/gateway.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/thiagogre/fabric-massified-insurances/test-network/rest-api-go/internal/domain"
)

// MockBlockchainGatewayInterface is a mock of BlockchainGatewayInterface interface.
type MockBlockchainGatewayInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainGatewayInterfaceMockRecorder
}

// MockBlockchainGatewayInterfaceMockRecorder is the mock recorder for MockBlockchainGatewayInterface.
type MockBlockchainGatewayInterfaceMockRecorder struct {
	mock *MockBlockchainGatewayInterface
}

// NewMockBlockchainGatewayInterface creates a new mock instance.
func NewMockBlockchainGatewayInterface(ctrl *gomock.Controller) *MockBlockchainGatewayInterface {
	mock := &MockBlockchainGatewayInterface{ctrl: ctrl}
	mock.recorder = &MockBlockchainGatewayInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainGatewayInterface) EXPECT() *MockBlockchainGatewayInterfaceMockRecorder {
	return m.recorder
}

// GetNetwork mocks base method.
func (m *MockBlockchainGatewayInterface) GetNetwork(channelID string) domain.NetworkInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", channelID)
	ret0, _ := ret[0].(domain.NetworkInterface)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockBlockchainGatewayInterfaceMockRecorder) GetNetwork(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockBlockchainGatewayInterface)(nil).GetNetwork), channelID)
}

// MockNetworkInterface is a mock of NetworkInterface interface.
type MockNetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkInterfaceMockRecorder
}

// MockNetworkInterfaceMockRecorder is the mock recorder for MockNetworkInterface.
type MockNetworkInterfaceMockRecorder struct {
	mock *MockNetworkInterface
}

// NewMockNetworkInterface creates a new mock instance.
func NewMockNetworkInterface(ctrl *gomock.Controller) *MockNetworkInterface {
	mock := &MockNetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkInterface) EXPECT() *MockNetworkInterfaceMockRecorder {
	return m.recorder
}

// GetContract mocks base method.
func (m *MockNetworkInterface) GetContract(chaincodeID string) domain.ContractInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", chaincodeID)
	ret0, _ := ret[0].(domain.ContractInterface)
	return ret0
}

// GetContract indicates an expected call of GetContract.
func (mr *MockNetworkInterfaceMockRecorder) GetContract(chaincodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockNetworkInterface)(nil).GetContract), chaincodeID)
}

// GetEvents mocks base method.
func (m *MockNetworkInterface) GetEvents(ctx context.Context, chaincodeID string, txnBlockNumber int) (<-chan *domain.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, chaincodeID, txnBlockNumber)
	ret0, _ := ret[0].(<-chan *domain.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockNetworkInterfaceMockRecorder) GetEvents(ctx, chaincodeID, txnBlockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockNetworkInterface)(nil).GetEvents), ctx, chaincodeID, txnBlockNumber)
}

// MockContractInterface is a mock of ContractInterface interface.
type MockContractInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContractInterfaceMockRecorder
}

// MockContractInterfaceMockRecorder is the mock recorder for MockContractInterface.
type MockContractInterfaceMockRecorder struct {
	mock *MockContractInterface
}

// NewMockContractInterface creates a new mock instance.
func NewMockContractInterface(ctrl *gomock.Controller) *MockContractInterface {
	mock := &MockContractInterface{ctrl: ctrl}
	mock.recorder = &MockContractInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractInterface) EXPECT() *MockContractInterfaceMockRecorder {
	return m.recorder
}

// EvaluateTransaction mocks base method.
func (m *MockContractInterface) EvaluateTransaction(function string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{function}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateTransaction", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateTransaction indicates an expected call of EvaluateTransaction.
func (mr *MockContractInterfaceMockRecorder) EvaluateTransaction(function interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{function}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateTransaction", reflect.TypeOf((*MockContractInterface)(nil).EvaluateTransaction), varargs...)
}

// NewTransactionProposal mocks base method.
func (m *MockContractInterface) NewTransactionProposal(transactionName string, args ...string) (*domain.TransactionProposalStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{transactionName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewTransactionProposal", varargs...)
	ret0, _ := ret[0].(*domain.TransactionProposalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransactionProposal indicates an expected call of NewTransactionProposal.
func (mr *MockContractInterfaceMockRecorder) NewTransactionProposal(transactionName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{transactionName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionProposal", reflect.TypeOf((*MockContractInterface)(nil).NewTransactionProposal), varargs...)
}
