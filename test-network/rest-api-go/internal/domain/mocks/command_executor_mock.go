// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/command_executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandExecutorInterface is a mock of CommandExecutorInterface interface.
type MockCommandExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorInterfaceMockRecorder
}

// MockCommandExecutorInterfaceMockRecorder is the mock recorder for MockCommandExecutorInterface.
type MockCommandExecutorInterfaceMockRecorder struct {
	mock *MockCommandExecutorInterface
}

// NewMockCommandExecutorInterface creates a new mock instance.
func NewMockCommandExecutorInterface(ctrl *gomock.Controller) *MockCommandExecutorInterface {
	mock := &MockCommandExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutorInterface) EXPECT() *MockCommandExecutorInterfaceMockRecorder {
	return m.recorder
}

// ExecuteCommand mocks base method.
func (m *MockCommandExecutorInterface) ExecuteCommand(name string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteCommand", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockCommandExecutorInterfaceMockRecorder) ExecuteCommand(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockCommandExecutorInterface)(nil).ExecuteCommand), varargs...)
}
